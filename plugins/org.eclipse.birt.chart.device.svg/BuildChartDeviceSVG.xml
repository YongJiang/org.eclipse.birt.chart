<?xml version="1.0"?>
<!--
 *
 *  Build.xml
 *
 *  Created on 05/23/2005
 *  Build script for project org.eclipse.birt.chart.device.svg
 *
 * 
 * The following are public targets callable by external users. 
 * 
 * "Clean" - Clean all objects created by this script. Individual project build script can not call this target; 
 * "Jar" - Compile source code and generate jar for this project.
 *          The compile dependency on other projects should be defined explicitly.
 *         eclipse.home should be passed in when Individual project build script  call this target; 
 *          the property of "failonerror" should be set true(default) when compiling source code
 * "UnitTest" - Run unit tests. This task must be called after calling Jar task, 
 *              so it needn't depend on Jar explicitly
 * "Export" - Export the project, for instance, jar files are copied to a designated folder. 
 *            this task must be called after calling Jar task, so it needn't depend on Jar explicitly
 * "JavaDoc" - generate java documents
 *
 * Usage:
 *    ant [any one or more of the public targets] 
 *        -Declipse.home=<your eclipse home> 

 *
 * Default target is "Jar".
 *
 * 
 * This script may also additional targets. These targets are private to this build script only. 
 *
 * "utest" - Run unit tests
 *
 * Notes:
 *  1. classpath need to be set for junit.jar
 *  2. This file now requires Ant 1.6
 *
 * Change History:
 *
 *    1. 05/23/2005: initial version
 *
-->

<project name="BIRT Chart Engine Project" default="build" basedir=".">
	<description>BIRT Chart Device SVG Project.</description>
	<!-- set global properties for this build -->
	<!-- Public properties, used by public targets, top level build script
			     will pass on the value at runtime. Properties will have there default
			     value.
	
			     eclipse.home
			     utest.report.dir
			     javadoc.dir
			     plugin.version 
	-->

	<!-- ===== Default value for public properties ============= -->
	<property name="utest.report.dir" location="utestreports" />
	<property name="javadoc.dir" location="docs/api" />
	<property name="plugin.version" value="1.0.1" />
	<property name="export.dir" location="export" />

	<property name="dir.utest" value="utest" />
	<property name="dir.src" value="src" />
	<property name="dir.test" value="test" />
	<property name="dir.bin" value="bin" />
	<property name="dir.lib" value="lib" />

	<property name="module.name" value="org.eclipse.birt.chart.device.svg" />

	<property name="core.dir" location="../org.eclipse.birt.core" />
	<property name="chart.engine.dir" value="../org.eclipse.birt.chart.engine" />
	<property name="chart.device.extension" value="../org.eclipse.birt.chart.device.extension" />


	<property name="def.emf.version" value="2.0.1" />
	<property name="def.eclipse.version" value="3.0.1" />

	<!-- set eclipse related properties -->
	<property name="emf.common.dir" value="org.eclipse.emf.common" />
	<property name="emf.ecore.dir" value="org.eclipse.emf.ecore" />
	<property name="emf.ecore.xmi.dir" value="org.eclipse.emf.ecore.xmi" />

	<path id="class.path">
		<pathelement path="${dir.bin}" />

		<fileset dir="${eclipse.home}/plugins">
			<include name="org.eclipse.core.runtime_*/runtime.jar"/>
			<include name="org.eclipse.core.runtime*.jar"/>
			<include name="org.eclipse.osgi_*/*.jar"/>
			<include name="org.eclipse.osgi*.jar"/>
			<include name="${emf.common.dir}_*/runtime/common.jar" />
			<include name="${emf.ecore.dir}_*/runtime/ecore.jar" />
			<include name="${emf.ecore.xmi.dir}_*/runtime/ecore.xmi.jar" />
			<include name="org.eclipse.emf.common_*.jar"/>
			<include name="org.eclipse.emf.ecore_*.jar"/>
			<include name="org.eclipse.emf.ecore.xmi_*.jar"/>
		</fileset>

		<fileset dir="${core.dir}/lib">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${chart.engine.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${chart.device.extension}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement path="${core.dir}/core.jar" />
	</path>




	<!-- Compile source code and generate jar for this project. 
		 Input parameters:
		 	eclipse.home
	-->
	<target name="Jar" depends="compileSource" description="create project jar">
		<!-- Create the project jar -->
		<jar destfile="device-svg.jar">
			<fileset dir="${dir.bin}">
				<include name="**/*.class" />
				<include name="**/*.txt" />
				<include name="**/*.xml" />
				<include name="**/*.def" />
				<include name="**/*.properties" />
			</fileset>
		</jar>
	</target>

	<!-- Export the project, for instance, jar files are copied to a designated folder
				 the dependency on Jar should implement in top level script by call sequence	
				 Parameters:
				 		- ${export.dir} target directory to put the plugin binaries
				 		- ${plugin.version} the version of plugin exported
	-->
	<target name="Export">
		<copy todir="${export.dir}/${module.name}_${plugin.version}">
			<fileset dir="." includes="device-svg.jar,about.html,plugin.xml,dir.lib/**,schema/**" />
		</copy>
	</target>


	<!-- public task UnitTest will not explicitly depend on complie, Top level script should call compile before calling UnitTest
		 Run Unit test.
		
	   	 Parameters:
			- ${utest.report.dir} target directory to put the unit test report
	-->

	<target name="UnitTest" depends="compileTest" description="run all the unit tests" />

	<!-- Compile Test code -->
	<target name="compileTest" />


	<!-- Clean all objects created by this script -->
	<target name="Clean" description="clean up">
		<!-- Delete the binary directory trees -->
		<delete dir="${dir.bin}" />
		<delete dir="device-svg.jar" />
	</target>

	<!-- Compile Source Files -->
	<target name="compileSource" depends="buildDependency">
		<mkdir dir="${dir.bin}" />

		<!-- copy any resource file we needed into the dir.bin directory-->
		<copy todir="${dir.bin}">
			<fileset dir="${dir.src}">
				<include name="**/*.txt" />
				<include name="**/*.xml" />
				<include name="**/*.properties" />
			</fileset>
		</copy>
		<!-- Compile the java code from ${dir.src} into ${dir.bin} -->
		<javac srcdir="${dir.src}" destdir="${dir.bin}" encoding="utf-8" source="1.4" debug="true">
			<classpath refid="class.path" />
		</javac>
	</target>


	<!-- Build the dependent projects -->
	<target name="buildDependency">
		<echo message="start call Jar task in ${core.dir}" />
		<ant dir="${core.dir}" antfile="BuildCore.xml" target="Jar" inheritall="false">
			<property name="eclipse.home" value="${eclipse.home}" />
		</ant>
		<echo message="end call Jar task in ${core.dir}" />

		<echo message="start call Jar task in ${chart.engine.dir}" />
		<ant dir="${chart.engine.dir}" antfile="BuildChartEngine.xml" target="Jar" inheritAll="false">
			<property name="eclipse.home" value="${eclipse.home}" />
			<property name="eclipse.version" value="${eclipse.version}" />
		</ant>
		<echo message="end call Jar task in ${chart.engine.dir}" />


		<echo message="start call Jar task in ${chart.device.extension}" />
		<ant dir="${chart.device.extension}" antfile="BuildChartDeviceExtension.xml" target="Jar" inheritAll="false">
			<property name="eclipse.home" value="${eclipse.home}" />
			<property name="eclipse.version" value="${eclipse.version}" />
		</ant>
		<echo message="end call Jar task in ${chart.device.extension}" />
	</target>

	<target name="javadoc_init" description="initialization">
		<condition property="eclipse.version" value="${def.eclipse.version}">
			<equals arg1="${eclipse.version}" arg2="$${eclipse.version}" />
		</condition>
		<condition property="emf.version" value="${def.emf.version}">
			<equals arg1="${emf.version}" arg2="$${emf.version}" />
		</condition>
	</target>

	<target name="Javadoc" depends="javadoc_init">
		<mkdir dir="${javadoc.dir}" />
		<javadoc access="public" author="true" overview="overview.html" windowtitle="BIRT Chart Device SVG Project" destdir="${javadoc.dir}" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" packagenames="
					org.eclipse.birt.chart.event,
					org.eclipse.birt.chart.device,
					org.eclipse.birt.chart.datafeed,
					org.eclipse.birt.chart.exception,
					" sourcefiles="./src/**/*.java" sourcepath="./src" splitindex="true" use="true" failonerror="true" version="true">
			<classpath>
				<pathelement path="${bin}" />
				<pathelement path="${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}/defaultAdaptor.jar" />
				<pathelement path="${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}/eclipseAdaptor.jar" />
				<pathelement path="${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}/osgi.jar" />
				<pathelement path="${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}/resolver.jar" />
				<pathelement path="${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}/core.jar" />
				<pathelement path="${eclipse.home}/plugins/org.eclipse.osgi_${eclipse.version}/console.jar" />
				<pathelement path="${eclipse.home}/plugins/org.eclipse.core.runtime_${eclipse.version}/runtime.jar" />
				<pathelement path="${eclipse.home}/plugins/${emf.ecore.dir}_${emf.version}/runtime/ecore.jar" />
				<pathelement path="${eclipse.home}/plugins/${emf.common.dir}_${emf.version}/runtime/common.jar" />
				<pathelement path="${eclipse.home}/plugins/${emf.ecore.xmi.dir}_${emf.version}/runtime/ecore.xmi.jar" />
				<pathelement path="org.eclipse.osgi*.jar"/>
				<pathelement path="org.eclipse.core.runtime_*.jar"/>
				<pathelement path="org.eclipse.emf.common_*.jar"/>
				<pathelement path="org.eclipse.emf.ecore_*.jar"/>
				<pathelement path="org.eclipse.emf.ecore.xmi_*.jar"/>
				<fileset dir="${core.dir}/lib">
					<include name="**/*.jar" />
				</fileset>
				<pathelement path="${core.dir}/bin" />
			</classpath>
			<bottom>
				<![CDATA[<i>Copyright &#169;  2005 Actuate Corp. All rights reserved. </i>]]></bottom>
	</javadoc>
</target>

<target name="build" depends="Jar" description="package engine and model file" />

</project>