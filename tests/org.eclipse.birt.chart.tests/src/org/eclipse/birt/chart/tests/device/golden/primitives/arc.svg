<?xml version="1.0" encoding="UTF-8"?>
<svg width="533.0" height="333.0"><g style="fill:none;stroke:none"><defs/><script><![CDATA[function BuildHelper(tag, attrList, text) {
	this.tag = tag;
	this.attrList = attrList;
	this.text       = text;
	this.element  = null;
	this.textNode = null;
	}	
		
	BuildHelper.prototype.addToParent= function(parent) {	
	if (!parent) return;	
	var svgDocument = parent.ownerDocument;
	this.element = svgDocument.createElementNS("http://www.w3.org/2000/svg",this.tag);
		
	for (var attribute in this.attrList){
	if (attribute == 'classType')	
		     this.element.setAttributeNS(null, 'class', this.attrList[attribute]);
	else	
		     this.element.setAttributeNS(null, attribute, this.attrList[attribute]);
	}	
		
	if (this.text) {
		this.textNode = svgDocument.createTextNode(this.text);
		this.element.appendChild(this.textNode);
	}
		
	parent.appendChild(this.element);
	};	
		
BuildHelper.prototype.insertBefore = function(parent, before) {
	if (typeof parent == 'undefined') return;	
	var svgDocument = parent.ownerDocument;
	this.element = svgDocument.createElementNS("http://www.w3.org/2000/svg",this.tag);
		
	for (var attribute in this.attrList){
	if (attribute == 'classType')	
		     this.element.setAttributeNS(null, 'class', this.attrList[attribute]);
	else	
		     this.element.setAttributeNS(null, attribute, this.attrList[attribute]);
	}	
		
	if (this.text) {
		this.textNode = svgDocument.createTextNode(this.text);
		this.element.appendChild(textNode);
	}
		
	parent.insertBefore(this.element, before);
	};	
		
		
	BuildHelper.prototype.removeNode = function() {	
	if (this.element) this.element.parentNode.removeChild(this.element);
	this.tag = "";
	this.attrList = null;
	this.text = null;
	this.element = null;
	this.textNode = null;
	};	
	function TM(){	
	}	
		
TM.setParent = function TooltipManager_setParent(parent, mainSvg){
	this.parent = parent;	
	this.mainSvg = mainSvg	
	}	
		
	TM.remove = function TooltipManager_removeTooltip(){	
	if (typeof this.group != 'undefined'){	
	  this.group.removeNode();
	  this.group = undefined;
	}	
	}	
		
	TM.show = function TooltiplManager_showTooltip(evt){	
	var text = TM.getText(TM.getTitleElement(evt));	
	x = evt.clientX;	
	y = evt.clientY;	
	if (typeof this.group == 'undefined'){	
	this.height = 15;	
	this.xPadding = 5;	
	   this.yPadding = -20;
	   var mainSvg = evt.target.ownerDocument.documentElement;
	   var off = mainSvg.currentTranslate;
	   var scl = mainSvg.currentScale;
	   this.group = new BuildHelper("g",
	     {
	     transform:"translate("+(((x+20))/scl)+","+(((y+20))/scl)+")"
	 } );
	   this.group.addToParent(mainSvg);
	   this.rectangle = new BuildHelper("rect",
	     {id:"test",
	      x: 0,
	      y: this.yPadding,
	      height: this.height,
	      classType: "tooltip"
	 } );
	   this.rectangle.addToParent(this.group.element);
	   var textObj = new BuildHelper("text",
	     {id:"tooltip",
	      x: this.xPadding,
	      y: (this.height/2+4+this.yPadding),
	      classType: "tooltip text"
	 },text);
	   textObj.addToParent(this.group.element);
	   var itemlength = textObj.element.getComputedTextLength();
	   this.rectangle.element.setAttributeNS(null, "width", (itemlength+2*this.xPadding));
	  }
	}
		
		
	TM.getTitleElement = function TM_getTitleElement(evt){
	    var elem = evt.currentTarget;
	if (elem == null ) return;	
	    var childs = elem.childNodes;
	    for (var x=0; x<childs.length; x++){
		if (childs.item(x).nodeType == 1 && childs.item(x).nodeName == "title")
		    return childs.item(x);
	    }
	    return null;
	}
		
	TM.getText = function TM_getText(elem){
	   var childs = elem ? elem.childNodes : null;
	   for (var x = 0;  childs && x < childs.length; x++)
	      if (childs.item(x).nodeType == 3)
		  return childs.item(x).nodeValue;
	   return "";
	}
		
]]></script><style type="text/css"><![CDATA[.tooltip.text{ text-anchor:left;font-size:12pt;fill:black;}.tooltip{fill:rgb(244,245,235)}]]></style><path d=" M380.57096354166663 111.5 C380.57096354166663 58.87174495589541 307.1400389472394 14.973092801569962 211.434175554928 10.386238143687834 L195.28548177083331 111.5 Z" style="fill-opacity:1.0;fill:#df0a37;"/><path d=" M380.57096354166663 181.5 C380.57096354166663 128.8717449558954 307.1400389472394 84.97309280156996 211.434175554928 80.38623814368783 L195.28548177083331 181.5 Z" style="stroke:#9c0726;stroke-width:1.0;stroke-miterlimit:10.0;stroke-linejoin:round;stroke-linecap:round;"/><path d=" M100.0 102.5 C100.0 100.53369611554285 99.48449597052122 98.57587518952296 98.46666218300808 96.67657148519328 L55.0 102.5 Z" style="stroke:#9c0726;stroke-width:1.0;stroke-miterlimit:10.0;stroke-linejoin:round;stroke-linecap:round;"/><path d=" M100.0 42.5 C100.0 30.07359312880715 79.8528137423857 20.0 55.0 20.0 L55.0 42.5 Z" style="stroke:#9c0726;stroke-width:1.0;stroke-miterlimit:10.0;stroke-linejoin:round;stroke-linecap:round;"/><path d=" M55.0 20.0 C30.147186257614305 20.0 10.000000000000007 30.073593128807147 10.0 42.5 L55.0 42.5 Z" style="stroke:#0000ff;stroke-width:1.0;stroke-miterlimit:10.0;stroke-linejoin:round;stroke-linecap:round;"/><path d=" M10.0 42.5 C10.0 54.926406871192846 30.14718625761429 65.0 54.99999999999999 65.0 L55.0 42.5 Z" style="stroke:#00ff00;stroke-width:1.0;stroke-miterlimit:10.0;stroke-linejoin:round;stroke-linecap:round;"/><path d=" M54.99999999999999 65.0 C79.85281374238569 65.0 100.0 54.92640687119285 100.0 42.50000000000001 L55.0 42.5 Z" style="stroke:#00ff00;stroke-width:1.0;stroke-dasharray: 6.0 4.0;stroke-miterlimit:0.0;stroke-linejoin:round;stroke-linecap:round;"/></g></svg>